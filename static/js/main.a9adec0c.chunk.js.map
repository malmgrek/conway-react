{"version":3,"sources":["Components/Game/Game.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["compose","fns","x","reduceRight","v","f","pipe","Cell","props","y","className","style","left","top","width","CELL_SIZE","height","Game","state","cells","interval","isRunning","bc","handleClick","e","elemOffset","getElementOffset","offsetX","clientX","offsetY","clientY","Math","floor","cols","rows","board","setState","makeCells","runGame","runIteration","stopGame","timeoutHandler","window","clearTimeout","handleIntervalChange","target","value","handleClear","makeEmptyBoard","handleRandom","random","handleBcChange","HEIGHT","WIDTH","this","rect","boardRef","getBoundingClientRect","doc","document","documentElement","pageXOffset","clientLeft","pageYOffset","clientTop","push","console","log","newBoard","neighbors","calculateNeighbors","setTimeout","dirs","isNeighbor","dir","y1","x1","z","i","length","backgroundSize","onClick","ref","n","map","cell","key","onChange","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SAQMA,G,MAAU,sCAAIC,EAAJ,yBAAIA,EAAJ,uBAAY,SAACC,GAAD,OAAOD,EAAIE,aAAY,SAACC,EAAGC,GAAJ,OAAUA,EAAED,KAAIF,MAC7DI,EAAO,SAACJ,GAAD,2BAAOD,EAAP,iCAAOA,EAAP,yBAAeD,EAAO,WAAP,EAAWC,EAAXD,CAAgBE,IAWtCK,EAAO,SAACC,GAAW,IACfN,EAASM,EAATN,EAAGO,EAAMD,EAANC,EACX,OACE,yBAAKC,UAAU,OAAOC,MAAO,CAC3BC,KAAK,GAAD,OApBQ,GAoBSV,EAAI,EAArB,MACJW,IAAI,GAAD,OArBS,GAqBQJ,EAAI,EAArB,MACHK,MAAM,GAAD,OAAKC,GAAL,MACLC,OAAO,GAAD,OAAKD,GAAL,UAgPGE,E,kDAxOb,aAAe,IAAD,8BACZ,gBAMFC,MAAQ,CACNC,MAAO,GACPC,SAAU,IACVC,WAAW,EACXC,GAAI,YAXQ,EAgDdC,YAAc,SAACC,GACb,IAAMC,EAAa,EAAKC,mBAClBC,EAAUH,EAAEI,QAAUH,EAAWvB,EACjC2B,EAAUL,EAAEM,QAAUL,EAAWhB,EAEjCP,EAAI6B,KAAKC,MAAML,EApFP,IAqFRlB,EAAIsB,KAAKC,MAAMH,EArFP,IAuFV3B,GAAK,GAAKA,GAAK,EAAK+B,MAAQxB,GAAK,GAAKA,GAAK,EAAKyB,OAClD,EAAKC,MAAM1B,GAAGP,IAAM,EAAKiC,MAAM1B,GAAGP,IAGpC,EAAKkC,SAAS,CAAEjB,MAAO,EAAKkB,eA5DhB,EAgEdC,QAAU,WACR,EAAKF,SAAS,CAAEf,WAAW,IAC3B,EAAKkB,gBAlEO,EAqEdC,SAAW,WACT,EAAKJ,SAAS,CAAEf,WAAW,IACvB,EAAKoB,iBACPC,OAAOC,aAAa,EAAKF,gBACzB,EAAKA,eAAiB,OAzEZ,EA+JdG,qBAAuB,SAACpB,GACtB,EAAKY,SAAS,CAAEhB,SAAUI,EAAEqB,OAAOC,SAhKvB,EAoKdC,YAAc,WACZ,EAAKZ,MAAQ,EAAKa,iBAClB,EAAKZ,SAAS,CAAEjB,MAAO,EAAKkB,eAtKhB,EAyKdY,aAAe,WACb,IAAK,IAAIxC,EAAI,EAAGA,EAAI,EAAKyB,KAAMzB,IAC7B,IAAK,IAAIP,EAAI,EAAGA,EAAI,EAAK+B,KAAM/B,IAC7B,EAAKiC,MAAM1B,GAAGP,GAAM6B,KAAKmB,UAAY,GAIzC,EAAKd,SAAS,CAAEjB,MAAO,EAAKkB,eAhLhB,EAmLdc,eAAiB,SAAC3B,GAChB,EAAKY,SAAS,CAAEd,GAAIE,EAAEqB,OAAOC,SAlL7B,EAAKZ,KAAOkB,GACZ,EAAKnB,KAAOoB,GACZ,EAAKlB,MAAQ,EAAKa,iBAJN,E,6DAiBZ,IADA,IAAIb,EAAQ,GACH1B,EAAI,EAAGA,EAAI6C,KAAKpB,KAAMzB,IAAK,CAClC0B,EAAM1B,GAAK,GACX,IAAK,IAAIP,EAAI,EAAGA,EAAIoD,KAAKrB,KAAM/B,IAC7BiC,EAAM1B,GAAGP,IAAK,EAGlB,OAAOiC,I,yCAIP,IAAMoB,EAAOD,KAAKE,SAASC,wBACrBC,EAAMC,SAASC,gBACrB,MAAO,CACL1D,EAAIqD,EAAK3C,KAAO8B,OAAOmB,YAAeH,EAAII,WAC1CrD,EAAI8C,EAAK1C,IAAM6B,OAAOqB,YAAeL,EAAIM,a,kCAO3C,IADA,IAAI7C,EAAQ,GACHV,EAAI,EAAGA,EAAI6C,KAAKpB,KAAMzB,IAC7B,IAAK,IAAIP,EAAI,EAAGA,EAAIoD,KAAKrB,KAAM/B,IACzBoD,KAAKnB,MAAM1B,GAAGP,IAChBiB,EAAM8C,KAAK,CAAE/D,IAAGO,MAItB,OAAOU,I,qCAgCO,IAAD,OACb+C,QAAQC,IAAI,qBAGZ,IAFA,IAAIC,EAAWd,KAAKN,iBAEXvC,EAAI,EAAGA,EAAI6C,KAAKpB,KAAMzB,IAC7B,IAAK,IAAIP,EAAI,EAAGA,EAAIoD,KAAKrB,KAAM/B,IAAK,CAClC,IAAImE,EAAYf,KAAKgB,mBAAmBhB,KAAKnB,MAAOjC,EAAGO,GACnD6C,KAAKnB,MAAM1B,GAAGP,GAEdkE,EAAS3D,GAAGP,GADI,IAAdmE,GAAiC,IAAdA,EAMlBf,KAAKnB,MAAM1B,GAAGP,IAAoB,IAAdmE,IACvBD,EAAS3D,GAAGP,IAAK,GAMzBoD,KAAKnB,MAAQiC,EACbd,KAAKlB,SAAS,CAAEjB,MAAOmC,KAAKjB,cAC5BiB,KAAKb,eAAiBC,OAAO6B,YAAW,WACtC,EAAKhC,iBACJe,KAAKpC,MAAME,Y,yCASGe,EAAOjC,EAAGO,GAoC3B,IApC+B,IAAD,OAC1B4D,EAAY,EAEVG,EAAO,CACX,EAAE,GAAI,GAAI,EAAE,EAAG,GAAI,EAAE,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,GAAI,GAAI,CAAC,GAAI,IAG9DC,EAAa,SAACC,GAClB,GAAsB,UAAlB,EAAKxD,MAAMI,GAAgB,CAE7B,IAAIqD,EAAKlE,EAAIiE,EAAI,GACbE,EAAK1E,EAAIwE,EAAI,GAEjB,OACEE,GAAM,GAAKA,EAAK,EAAK3C,MAAQ0C,GAAM,GAAKA,EAAK,EAAKzC,MAClDC,EAAMwC,GAAIC,GAGP,GAAsB,aAAlB,EAAK1D,MAAMI,GAAmB,CAEvC,IAAIqD,EAAKrE,EACPG,EAAIiE,EAAI,IACR,SAAAG,GAAC,OAAIA,GAAK,EAAIA,EAAI,EAAK3C,KAAO,KAC9B,SAAA2C,GAAC,OAAIA,EAAI,EAAK3C,KAAO2C,EAAI,KAEvBD,EAAKtE,EACPJ,EAAIwE,EAAI,IACR,SAAAG,GAAC,OAAIA,GAAK,EAAIA,EAAI,EAAK5C,KAAO,KAC9B,SAAA4C,GAAC,OAAIA,EAAI,EAAK5C,KAAO4C,EAAI,KAG3B,OAAO1C,EAAMwC,GAAIC,KAKZE,EAAI,EAAGA,EAAIN,EAAKO,OAAQD,IAAK,CAGhCL,EAFQD,EAAKM,KAGfT,IAKJ,OAAOA,I,+BA2BC,IAAD,SACgCf,KAAKpC,MAApCC,EADD,EACCA,MAAiBE,GADlB,EACQD,SADR,EACkBC,WACzB,OACE,6BACE,yBACEX,UAAU,QACVC,MAAO,CACLG,MA5NE,IA6NFE,OA5NG,IA6NHgE,eAAe,GAAD,OA/NR,GA+NQ,cA/NR,GA+NQ,OAEhBC,QAAS3B,KAAK/B,YACd2D,IAAK,SAACC,GAAQ,EAAK3B,SAAW2B,IAE7BhE,EAAMiE,KACL,SAAAC,GAAI,OACF,kBAAC,EAAD,CACEnF,EAAGmF,EAAKnF,EACRO,EAAG4E,EAAK5E,EACR6E,IAAG,UAAKD,EAAKnF,EAAV,YAAemF,EAAK5E,SAM/B,yBAAKC,UAAU,YAAf,gBACe,2BACXoC,MAAOQ,KAAKpC,MAAME,SAClBmE,SAAUjC,KAAKV,uBAHnB,QAIGvB,EACC,4BAAQX,UAAU,SAASuE,QAAS3B,KAAKd,UAAzC,QACA,4BAAQ9B,UAAU,SAASuE,QAAS3B,KAAKhB,SAAzC,OAEF,4BAAQ5B,UAAU,SAASuE,QAAS3B,KAAKL,cAAzC,UACA,4BAAQvC,UAAU,SAASuE,QAAS3B,KAAKP,aAAzC,SACA,4BACErC,UAAU,WACVoC,MAAOQ,KAAKpC,MAAMI,GAClBiE,SAAUjC,KAAKH,gBACf,4BAAQL,MAAM,SAAd,YACA,4BAAQA,MAAM,YAAd,sB,GAjOO0C,IAAMC,WCpBVC,EATH,WACV,OACE,yBAAKhF,UAAU,OACb,qDACA,kBAAC,EAAD,QCIciF,QACW,cAA7BjD,OAAOkD,SAASC,UAEe,UAA7BnD,OAAOkD,SAASC,UAEhBnD,OAAOkD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASrC,SAASsC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a9adec0c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Game.css\";\n\n\nconst CELL_SIZE = 20;\nconst WIDTH = 800;\nconst HEIGHT = 600;\n\nconst compose = (...fns) => (x) => fns.reduceRight((v, f) => f(v), x);\nconst pipe = (x, ...fns) => compose(...fns)(x)\n\n\n/**\n * TODO:\n *  - Options for boundary conditions\n *  - Select cells with keyboard\n *  - Options to select some well-known cells\n */\n\n\nconst Cell = (props) => {\n  const { x, y } = props;\n  return (\n    <div className=\"Cell\" style={{\n      left: `${CELL_SIZE * x + 1}px`,\n      top: `${CELL_SIZE * y + 1}px`,\n      width: `${CELL_SIZE - 1}px`,\n      height: `${CELL_SIZE - 1}px`,\n    }} />\n  );\n};\n\n\nclass Game extends React.Component {\n\n  constructor() {\n    super();\n    this.rows = HEIGHT / CELL_SIZE;\n    this.cols = WIDTH / CELL_SIZE;\n    this.board = this.makeEmptyBoard();\n  }\n\n  state = {\n    cells: [],\n    interval: 100,\n    isRunning: false,\n    bc: \"periodic\"\n  }\n\n  // Create an empty board\n  makeEmptyBoard() {\n    let board = [];\n    for (let y = 0; y < this.rows; y++) {\n      board[y] = [];\n      for (let x = 0; x < this.cols; x++) {\n        board[y][x] = false;\n      }\n    }\n    return board;\n  }\n\n  getElementOffset() {\n    const rect = this.boardRef.getBoundingClientRect();\n    const doc = document.documentElement;\n    return {\n      x: (rect.left + window.pageXOffset) - doc.clientLeft,\n      y: (rect.top + window.pageYOffset) - doc.clientTop,\n    };\n  }\n\n  // Create cells from this.board\n  makeCells() {\n    let cells = [];\n    for (let y = 0; y < this.rows; y++) {\n      for (let x = 0; x < this.cols; x++) {\n        if (this.board[y][x]) {\n          cells.push({ x, y });\n        }\n      }\n    }\n    return cells;\n  }\n\n  handleClick = (e) => {\n    const elemOffset = this.getElementOffset();\n    const offsetX = e.clientX - elemOffset.x;\n    const offsetY = e.clientY - elemOffset.y;\n\n    const x = Math.floor(offsetX / CELL_SIZE);\n    const y = Math.floor(offsetY / CELL_SIZE);\n\n    if (x >= 0 && x <= this.cols && y >= 0 && y <= this.rows) {\n      this.board[y][x] = !this.board[y][x];\n    }\n\n    this.setState({ cells: this.makeCells() });\n\n  }\n\n  runGame = () => {\n    this.setState({ isRunning: true });\n    this.runIteration();\n  }\n\n  stopGame = () => {\n    this.setState({ isRunning: false });\n    if (this.timeoutHandler) {\n      window.clearTimeout(this.timeoutHandler);\n      this.timeoutHandler = null;\n    }\n  }\n\n  runIteration() {\n    console.log(\"running iteration\");\n    let newBoard = this.makeEmptyBoard();\n\n    for (let y = 0; y < this.rows; y++) {\n      for (let x = 0; x < this.cols; x++) {\n        let neighbors = this.calculateNeighbors(this.board, x, y);\n        if (this.board[y][x]) {\n          if (neighbors === 2 || neighbors === 3) {\n            newBoard[y][x] = true;\n          } else {\n            newBoard[y][x] = false;\n          }\n        } else {\n          if (!this.board[y][x] && neighbors === 3) {\n            newBoard[y][x] = true;\n          }\n        }\n      }\n    }\n\n    this.board = newBoard;\n    this.setState({ cells: this.makeCells() });\n    this.timeoutHandler = window.setTimeout(() => {\n      this.runIteration();\n    }, this.state.interval);\n  }\n\n  /**\n   * Calculate the number of neighbors at point (x, y)\n   * @param {Array} board\n   * @param {int} x\n   * @param {int} y\n   */\n  calculateNeighbors(board, x, y) {\n    let neighbors = 0;\n\n    const dirs = [\n      [-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]\n    ];\n\n    const isNeighbor = (dir) => {\n      if (this.state.bc === \"fixed\") {\n\n        let y1 = y + dir[0];\n        let x1 = x + dir[1];\n\n        return (\n          x1 >= 0 && x1 < this.cols && y1 >= 0 && y1 < this.rows &&\n          board[y1][x1]\n        );\n\n      } else if (this.state.bc === \"periodic\") {\n\n        let y1 = pipe(\n          y + dir[0],\n          z => z >= 0 ? z : this.rows - 1,\n          z => z < this.rows ? z : 0\n        );\n        let x1 = pipe(\n          x + dir[1],\n          z => z >= 0 ? z : this.cols - 1,\n          z => z < this.cols ? z : 0\n        );\n\n        return board[y1][x1];\n\n      }\n    }\n\n    for (let i = 0; i < dirs.length; i++) {\n      const dir = dirs[i];\n\n      if (isNeighbor(dir)) {\n        neighbors++;\n      }\n\n    }\n\n    return neighbors;\n  }\n\n  handleIntervalChange = (e) => {\n    this.setState({ interval: e.target.value });\n  }\n\n\n  handleClear = () => {\n    this.board = this.makeEmptyBoard();\n    this.setState({ cells: this.makeCells() });\n  }\n\n  handleRandom = () => {\n    for (let y = 0; y < this.rows; y++) {\n      for (let x = 0; x < this.cols; x++) {\n        this.board[y][x] = (Math.random() >= 0.5);\n      }\n    }\n\n    this.setState({ cells: this.makeCells() });\n  }\n\n  handleBcChange = (e) => {\n    this.setState({ bc: e.target.value });\n  }\n\n  render() {\n    const { cells, interval, isRunning } = this.state;\n    return (\n      <div>\n        <div\n          className=\"Board\"\n          style={{\n            width: WIDTH,\n            height: HEIGHT,\n            backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`\n          }}\n          onClick={this.handleClick}\n          ref={(n) => { this.boardRef = n; }}>\n\n          {cells.map(\n            cell => (\n              <Cell\n                x={cell.x}\n                y={cell.y}\n                key={`${cell.x},${cell.y}`}\n              />\n            )\n          )}\n        </div>\n\n        <div className=\"controls\">\n          Update every <input\n            value={this.state.interval}\n            onChange={this.handleIntervalChange} /> msec\n          {isRunning ?\n            <button className=\"button\" onClick={this.stopGame}>Stop</button> :\n            <button className=\"button\" onClick={this.runGame}>Run</button>\n          }\n          <button className=\"button\" onClick={this.handleRandom}>Random</button>\n          <button className=\"button\" onClick={this.handleClear}>Clear</button>\n          <select\n            className=\"dropdown\"\n            value={this.state.bc}\n            onChange={this.handleBcChange}>\n            <option value=\"fixed\">Fixed BC</option>\n            <option value=\"periodic\">Periodic BC</option>\n          </select>\n        </div>\n\n      </div>\n    );\n  }\n};\n\nexport default Game;","import React from 'react';\nimport './App.css';\nimport Game from '../Game/Game';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <h1>Conway's Game of Life</h1>\n      <Game />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}